plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Check key.properties file on root folder of build.gradle.
def keyProperties = new Properties()
def keyStorePropertiesFile = rootProject.file('key.properties')

android {
    namespace "com.example.calander"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.calander"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    // flavorDimensions is depecrated in latest version of build gradle but flutter still using old version.
    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            resValue "string", "app_name", "Nepali Calander DEV"
            applicationIdSuffix ".dev"
        }
        staging {
            dimension "default"
            resValue "string", "app_name", "Nepali Calander Staging"
            applicationIdSuffix ".staging"
        }
        prod {
            dimension "default"
            resValue "string", "app_name", "Neapli Calander"
        }
    }

    signingConfigs {
        release {
            if (keyStorePropertiesFile.exists()){
                keyProperties.load(keyStorePropertiesFile.newDataInputStream())
                storeFile keyProperties['storeFile'] ? file(keyProperties['storeFile']) : null
                storePassword keyProperties.getProperty('storePassword')
                keyAlias keyProperties.getProperty('keyAlias')
                keyPassword keyProperties.getProperty('keyPassword')
            }
        }
        debug {
            storeFile file("../../android-debug-key.jks")
            storePassword 'android'
            keyAlias 'androidkeydebug'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
